What happens when you initialize a repository?  Why do you need to do it?

The only thing of significance that happens is that it creates the .git folder which 
holds all the meta data that is used to track files changes. You can delete a
repository by simply deleting this file and preserving the rest of the files in the 
folder.  You can also recreate this file again which creates the repository by
simply issuing the: git init command.  

But remember that if you do decide to delete the the .git folder all your version
tracking of your files in that directory is gone.

I forgot that you are also put on the "branch master."

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The staging area contains the files you have marked to be tracked, files that are
tracked and modified and files that are marked resolved/merged.  The working
directory in contrast contains all tracked and untracked files, and is where the 
.git file is put when you execute the git init command. The .git file defines
the repository.  

The staging area allows the user to decide which files to track.  He or she could
chose one two three files or all files to track. That allows for more flexibility in 
managing the repository.

How can you use the staging area to make sure you have one commit per logical change?

I can execute $git diff --staged.  Doing this I can determine if there are 
big enough changes to commit per logical change.


What are some situations when branches would be helpful in keeping your history 
organized?  How would branches help?

If you wanted to have two versions of a project instead of one and wanted to 
track the changes for the two projects.  Branching helps you track the versioning
of the two streams of development.  Branching also will work of the same physical
files but allow you two virtual projects of developement streams.

How do the diagrams help you visualize the branch structure?

It visually shows you a path between child commit to parent commit that the
git log will list for you. This is the reachable line on a branch, it also illustrates
the concept of a detached HEAD which means any commit that is not on the
path is a commit that is detached from the branch thus unreachable by git log.
It is still reachable if you copy down the commit id and cehck it out again but as far as git log is concerned it never existed.   
